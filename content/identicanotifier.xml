<?xml version="1.0"?>
<!DOCTYPE overlay SYSTEM "chrome://identicanotifier/locale/identicanotifier.dtd">
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="identicanotifier-notice">
    <content>
      <xul:vbox class="identicanotifier-notice-box">
	<xul:hbox align="center">
	  <xul:image class="identicanotifier-notice-check"/>
	  <xul:description class="identicanotifier-notice-message" xbl:inherits="value" />
	</xul:hbox>
      </xul:vbox>
    </content>
  </binding>

  <binding id="identicanotifier-status">
    <content>
      <xul:menupopup id="identicanotifier-status-menupopup">
        <xul:menuitem label="&identicanotifier.copyDent;" oncommand="gIdenticaNotifier.copyDent(this)"/>
        <xul:menuitem label="&identicanotifier.redent;" oncommand="gIdenticaNotifier.redent(this)"/>
        <xul:menuitem label="&identicanotifier.openDentInTab;" oncommand="gIdenticaNotifier.openDent(this)"/>
	<xul:menuseparator/>
        <xul:menuitem label="&identicanotifier.deleteDent;" oncommand="gIdenticaNotifier.deleteDent(this)" disabled="true"/>
      </xul:menupopup>

      <xul:stack flex="1" class="identicanotifier-status-hbox-container"
		 onclick="gIdenticaNotifier.onBalloonClick(event)"
                 context="identicanotifier-status-menupopup">
	<xul:box>
	  <!-- user icon -->
	  <xul:vbox flex="1">
	    <xul:stack>
	      <xul:image class="identicanotifier-status-usericon" align="top" 
			 xbl:inherits="src=profile_image_url, tooltiptext=name, href, unread" />
	    </xul:stack>
	    <xul:spacer flex="1" />
	  </xul:vbox>
	  <!-- messages -->
	  <xul:vbox class="identicanotifier-status-messagebox" 
		    xbl:inherits="tooltiptext=time">
	    <xul:description class="identicanotifier-status-user" 
			     xbl:inherits="value=screen_name,tooltiptext=time" />
	    <xul:description class="identicanotifier-status-message" xbl:inherits="tooltiptext=time">
	      <children />
	    </xul:description>
	  </xul:vbox>
	</xul:box>

	<!-- function icons -->
	<xul:vbox anonid="function-icons" style="left: 240px; width: 16px; display: none;">
	  <xul:image class="identicanotifier-status-reply" 
		     onclick="gIdenticaNotifier.onReply(this); return false;" 
		     tooltiptext="&identicanotifier.replyButton.tooltip;" 
		     xbl:inherits="name=screen_name,messageId,attr,type"/>
	  <xul:image class="identicanotifier-status-favorite" 
		     onclick="gIdenticaNotifier.onFavorite(this); return false;" 
		     tooltiptext="&identicanotifier.favoriteButton.tooltip;" 
		     xbl:inherits="favorited, messageId, attr,type"/>
	</xul:vbox>
      </xul:stack>
    </content>

    <handlers>
      <handler event="mouseover">
        this.functionIcons.style.display = "block";
	gIdenticaNotifier.onBalloonMouseOver(event);
      </handler>
      <handler event="mouseout">
        this.functionIcons.style.display = "none";
	gIdenticaNotifier.onBalloonMouseOut(event);
      </handler>
    </handlers>

    <implementation>
      <field name="functionIcons">
        document.getAnonymousElementByAttribute(this, "anonid", "function-icons");
      </field>
    </implementation>
  </binding>

  <binding id="identicanotifier-toolbar">
    <content>
      <xul:hbox align="center" flex="1">
	<xul:image class="identicanotifier-linkbutton" 
		   tooltiptext="&identicanotifier.linkButton.tooltip;"
		   onclick="gIdenticaNotifier.onInsertURL()"/>
	<xul:description anonid="timeline" class="identicanotifier-tab"
			 tooltiptext="&identicanotifier.recent.tooltip;"
			 defaultvalue="Recent"
			 onclick="gIdenticaNotifier.changeTab('timeline')"/>
	<xul:description anonid="replies" class="identicanotifier-tab"
			 tooltiptext="&identicanotifier.replies.tooltip;" 
			 defaultvalue="Replies"
			 onclick="gIdenticaNotifier.changeTab('replies')"/>
	<xul:description anonid="messages" class="identicanotifier-tab"
			 tooltiptext="&identicanotifier.messages.tooltip;"
			 defaultvalue="Messages"
			 onclick="gIdenticaNotifier.changeTab('messages')"/>
	<xul:spacer flex="1"/>
	<xul:description class="identicanotifier-charcount" value="" xbl:inherits="value=charcount, charover"/>
      </xul:hbox>
    </content>
  </binding>
  
  <binding id="identicanotifier-popup">
    <content>
      <xul:vbox>
	<xul:hbox class="identicanotifier-popup-logo-box" align="center">
	  <xul:image class="identicanotifier-popup-logo" 
		     onclick="gIdenticaNotifier.openURL('http://floss.pro/'); 
			      gIdenticaNotifier.closePopup(false); return false;" 
		     tooltiptext="&identicanotifier.logo.tooltip;" 
		     src="chrome://identicanotifier/content/logo-small.png" />
	  <xul:spacer flex="1"/>
	  <xul:popupset>
	    <xul:menupopup id="identicanotifier-accounts-popup" 
			   sortDirection="ascending"
			   onpopupshowing="gIdenticaNotifier.onAccountMenuShowing(this)"/>
	  </xul:popupset>
	  <xul:hbox class="identicanotifier-current-account" align="right">
	    <xul:image class="identicanotifier-current-account-icon" 
		       menu="identicanotifier-accounts-popup"
		       xbl:inherits="src=user_profile_image_url" />
	    <xul:label anonid="currentUser"
		       class="identicanotifier-current-account-name"
		       menu="identicanotifier-accounts-popup"
		       tooltiptext="&identicanotifier.changeAccount.tooltip;"/>
	  </xul:hbox>
	  <xul:image class="identicanotifier-close-button" 
		     onclick="gIdenticaNotifier.closePopup(true);" 
		     tooltiptext="&identicanotifier.closeButton.tooltip;"/>
	</xul:hbox>
	<xul:hbox classname="identicanotifier-scrollbox">
	  <xul:scrollbox id="identicanotifier-statusbox" 
			 class="identicanotifier-statusbox" 
			 orient="vertical" sborient="vertical">
	    <children/>
	  </xul:scrollbox>
	  
	  <xul:vbox class="identicanotifier-scrollbar">
	    <xul:slider id="identicanotifier-slider" flex="1" orient="vertical" sborient="vertical" pageincrement="10" xbl:inherits="curpos,maxpos">
	      <xul:image class="identicanotifier-scroll-thumb" flex="1"/>
	    </xul:slider>
	  </xul:vbox>

	</xul:hbox>
	<xul:vbox>
	  <xul:hbox anonid="toolbar" class="identicanotifier-toolbar" xbl:inherits="charcount,charover"/>

	  <xul:vbox flex="1" id="identicanotifier-input-container">
	    <xul:textbox id="identicanotifier-message-input" 
			 anonid="input"
                         spellcheck="true"
			 tooltiptext="&identicanotifier.enterStatus.tooltip;"
			 ontextreverted="return gIdenticaNotifier.onRevertText(this);"
			 align="center"
			 xbl:inherits="value=text"/>
            <xul:progressmeter id="identicanotifier-progressmeter" mode="undetermined" hidden="true"/>
            <xul:description id="identicanotifier-error-message" xbl:inherits="value=errorMessage" hidden="true"/>
	  </xul:vbox>

	</xul:vbox>
      </xul:vbox>
    </content>

    <handlers>
      <handler event="input">
	var text = event.originalTarget;
        this.text = text.value;

        if (text.value.length == 0) gIdenticaNotifier.resetInReplyTo();

        this.showTextBox();

        this.setAttribute("charcount", text.value.length == 0 ? "" : 140 - text.value.length);
	this.setAttribute("charover", (text.value.length > 140) ? 1 : 0);
      </handler>

      <handler event="keypress" keycode="VK_RETURN">
        gIdenticaNotifier.onSendMessage();
        event.preventDefault();
	event.stopPropagation();
      </handler>

      <handler event="keypress" keycode="VK_DOWN">
          if (this.text.length == 0)  this.scrollBy(1);
      </handler>

      <handler event="keypress" keycode="VK_UP">
          if (this.text.length == 0)  this.scrollBy(-1);
      </handler>

      <handler event="keypress" keycode="VK_ESCAPE" phase="capturing">
        gIdenticaNotifier.onRevertText(this.input);
      </handler>

      <handler event="keypress" keycode="VK_TAB" phase="capturing">
	<![CDATA[
          event.preventDefault();
	  event.stopPropagation();

	  var tabs = ["timeline", "replies", "messages"];
          for (var i = 0; i < tabs.length; ++i) {
            if (this.activeTab == tabs[i]) {
              var index = i + 1;
              if (index == tabs.length) index = 0;
              gIdenticaNotifier.changeTab(tabs[index]);
              break;
            }
          }
      ]]>
      </handler>

      <handler event="click">
	if (event.originalTarget.nodeName == "xul:slider") {
          var pos = event.originalTarget.getAttribute("curpos");
          this.getScrollBoxObject().scrollTo(0, pos * 10);
        }
      </handler>

      <handler event="DOMMouseScroll">
      </handler>

      <handler event="draggesture">
        if (event.originalTarget.tagName == "xul:image") {
          this.isDragging = true;
        }
      </handler>

      <handler event="mousemove">
        if (this.isDragging) {
          var pos = event.originalTarget.getAttribute("curpos");
          this.getScrollBoxObject().scrollTo(0, pos * 10);
        }
      </handler>

      <handler event="mouseup">
	this.isDragging = false;
      </handler>
    </handlers>

    <implementation>
      <field name="activeTab" />
      <field name="isDragging">false</field>
      <field name="curpos" />
      <field name="text" />
      <field name="input">
        document.getAnonymousElementByAttribute(this, "anonid", "input");
      </field>

      <property name="message">
	<setter>
	  this.text = val;
	  this.input.value = val;
	</setter>
      </property>

      <property name="currentUser">
	<setter>
          this.setAttribute("autocompletesearchparam", val);
          document.getAnonymousElementByAttribute(this, "anonid", "currentUser").value = val;
        </setter>
      </property>

      <property name="currentUserIcon">
	<setter>
          this.setAttribute("user_profile_image_url", val);
        </setter>
      </property>

      <property name="isOpen" readonly="true">
	<getter>return (this.parentNode.state == "open") ? true : false;</getter>
      </property>

      <constructor>
        var obj = this;
	document.getElementById("identicanotifier-statusbox").addEventListener("DOMMouseScroll", function(e) {obj.onScroll(e)}, false);
	document.getElementById("identicanotifier-slider").addEventListener("DOMMouseScroll", function(e) {obj.onScroll(e)}, false);
        this.text = "";
      </constructor>

      <method name="onScroll">
	<parameter name="event"/>
	<body>
          var step = (event.detail > 0) ? 1 : -1;
          this.scrollBy(step);
	</body>
      </method>

      <method name="scrollBy">
	<parameter name="direction"/>
	<body>
          var box = this.getScrollBoxObject();
          box.scrollByIndex(direction);
          var y = {}
	  box.getPosition({}, y);
	  this.curpos = y.value / 10;
	  this.setAttribute("curpos", this.curpos);
	</body>
      </method>

      <method name="getScrollBoxObject">
	<body>
          var box = document.getElementById("identicanotifier-statusbox");
          return box.boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject);
	</body>
      </method>

      <method name="setActiveTab">
	<parameter name="data"/>
	<body><![CDATA[
          var toolbar = document.getAnonymousElementByAttribute(this, "anonid", "toolbar"); 
	  try {
	    if (this.activeTab) 
	      document.getAnonymousElementByAttribute(toolbar, "anonid", this.activeTab).setAttribute("attr", null);

            document.getAnonymousElementByAttribute(toolbar, "anonid", data.type).setAttribute("attr", "active");
            this.activeTab = data.type;
	  }
          catch (e) {
            dump("Failed to set tab: " + e.message + "\n");
          }

          try {
            this.recalcScrollbar(true);
          }
          catch (e) {}

	  this.unread = data;
	  this.setUnreadCount();

	  this.setAttribute("text", this.text); 
          var input   = this.input;
	  input.value = this.text;
          this.setAttribute("charcount", this.text.length == 0 ? "" : 140 - this.text.length);
          this.setAttribute("charover", (this.text.length > 140) ? 1 : 0);

          input.select();
          input.focus();

        ]]></body>
      </method>

      <method name="setUnreadCount">
	<body><![CDATA[
          var tabs = ["timeline", "replies", "messages"];
          var toolbar = document.getAnonymousElementByAttribute(this, "anonid", "toolbar"); 
          for (var i = 0; i < tabs.length; i++) {
            var elem = document.getAnonymousElementByAttribute(toolbar, "anonid", tabs[i]);
            elem.value = elem.getAttribute("defaultvalue");
            if (this.unread[tabs[i]]) {
              elem.setAttribute("unread", true);
              elem.value += '(' + this.unread[tabs[i]] + ')';
            }
            else {
              elem.setAttribute("unread", false);
            }
          }
        ]]></body>
      </method>

      <method name="markRead">
	<body><![CDATA[
          this.unread[this.activeTab] = 0;
          this.setUnreadCount();
        ]]></body>
      </method>


      <method name="resetTab">
	<body><![CDATA[
          var toolbar = document.getAnonymousElementByAttribute(this, "anonid", "toolbar"); 
          try {
            this.setUnreadCount();
	    if (this.activeTab) 
	      document.getAnonymousElementByAttribute(toolbar, "anonid", this.activeTab).setAttribute("attr", "active");
	    if (this.curpos)
	      this.getScrollBoxObject().scrollTo(0, this.curpos * 10);
          }
          catch (e) {}

          this.currentUser = this.getAttribute("autocompletesearchparam");
	  this.setAttribute("text", this.text); 
        ]]></body>
      </method>

      <method name="removeStatuses">
	<body>
	  while(this.firstChild) this.removeChild(this.firstChild);
	</body>
      </method>

      <method name="show">
        <body>
          this.style.display = "block";
          document.getElementById("identicanotifier-message-input").setAttribute("spellcheck", "true");
          var panel = this.parentNode;
          if (panel.state != "open") {
            var button = document.getElementById("identicanotifier-statusbar-button");
            panel.openPopup(button, "before_end", 0, 0, false, false);
          }
        </body>
      </method>

      <method name="hide">
	<body>
	  this.style.display = "none";
	  this.shrinkTextBox();
          document.getElementById("identicanotifier-message-input").setAttribute("spellcheck", "false");
          this.parentNode.hidePopup();
	</body>
      </method>

      <method name="resetText">
	<body>
          document.getElementById("identicanotifier-message-input").value = this.text = "";
	  this.setAttribute("charcount", "");
	  this.setAttribute("charover", 0);
          this.showTextBox(true);
          this.shrinkTextBox();
          this.input.focus();
	</body>
      </method>

      <method name="addBalloon">
	<parameter name="elem"/>
	<body><![CDATA[
          var attr = elem.getAttribute("attr");
          if (this.activeTab == attr) {
            for (var i = 0; i < this.childNodes.length; ++i) {
              // check the element is already in the container
              if (this.childNodes[i].id == elem.id) {
                return;
              }
            }
            this.insertBefore(elem, this.firstChild);
            if (this.childNodes.length > 40) {
              this.removeChild(this.lastChild);
            }
          }
          this.unread[attr] = this.unread[attr] + 1;
          this.setUnreadCount();
	]]></body>
      </method>

      <method name="recalcScrollbar">
	<parameter name="force"/>
	<body><![CDATA[
	  var lastElem = this.lastChild;
          if (lastElem) {
	    // Making scrollbar parameters
	    var sb = this.getScrollBoxObject();
	    var height = {};
            var currentHeight = {};

	    sb.getPosition({}, currentHeight);
	    sb.scrollToElement(lastElem);
	    sb.getPosition({}, height);


            if (force) {
                sb.scrollTo(0, 0);
                this.setAttribute("curpos", 1);
                this.setAttribute("maxpos", height.value / 10);
                this.setAttribute("curpos", 0);
                this.curpos = 0;
            }
            else {
                this.setAttribute("maxpos", height.value / 10);
                sb.scrollTo(0, currentHeight.value);
                this.setAttribute("curpos", this.curpos);
            } 
	  }
        ]]></body>
      </method>

      <method name="enlargeInputBox">
        <parameter name="flag"/>
        <body>
          var box =document.getElementById("identicanotifier-statusbox");
          var prev = box.style.height;

          box.style.height    = flag ? "230px" : "300px";

          var container = document.getElementById("identicanotifier-input-container");
          container.style.height    = flag ? "100px" : "30px";

          return (prev != box.style.height) ? true : false;
        </body>
      </method>

      <method name="hideElement">
        <parameter name="elem"/>
        <parameter name="flag"/>
	<body><![CDATA[
          if (flag) {
            elem.hidden = true;
          }
          else {
            elem.removeAttribute("hidden");
          } 
	]]></body>
      </method>

      <method name="showProgress">
        <parameter name="flag"/>
	<body><![CDATA[
          var progress = document.getElementById("identicanotifier-progressmeter");
          this.hideElement(progress, !flag);
          this.hideElement(this.input, flag);

          this.enlargeInputBox(false);

        ]]></body>
      </method>

      <method name="showErrorMessage">
        <parameter name="flag"/>
	<body><![CDATA[

          var messagebox = document.getElementById("identicanotifier-error-message");
          var progress   = document.getElementById("identicanotifier-progressmeter");

          this.hideElement(messagebox, !flag);
          if (flag) {
            this.hideElement(progress, flag);
            this.enlargeInputBox(false);
          }
          else {
            this.hideElement(progress, true);
            this.hideElement(this.input, flag);
            this.enlargeInputBox(true);
          } 

        ]]></body>
      </method>

      <method name="showTextBox">
        <parameter name="force"/>
	<body><![CDATA[
          var rows = (this.input.value.length != 0) ? 5 : 0;
          if (rows == 0) return;

          var changed = this.enlargeInputBox(rows);

          this.input.setAttribute("rows", rows);
          this.input.setAttribute("multiline", rows ? "true" : "false");

          if (force || changed) {
            setTimeout("gIdenticaNotifier.setFocusToInput()", 50);
          }
        ]]></body>
      </method>

      <method name="shrinkTextBox">
        <parameter name="force"/>
	<body><![CDATA[
          if (this.input.value.length == 0) {
            this.enlargeInputBox(false);
            this.input.setAttribute("rows", 0);
            this.input.setAttribute("multiline", "false");
          }
        ]]></body>
      </method>


    </implementation>
  </binding>
</bindings>

